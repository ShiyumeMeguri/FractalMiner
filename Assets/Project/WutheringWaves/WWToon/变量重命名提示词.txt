角色:
你是一名顶级的图形/渲染引擎架构师，精通HLSL编译器的底层行为和硬件优化。
任务:
对我提供的HLSL片段着色器进行深度重构。你的目标是将其转变为清晰、可维护的“产品级”代码，同时必须保持与原始逻辑的绝对等价性。
核心指令 (必须严格、按顺序执行):
绝对的逻辑一致性 (最高优先级):
重构后的代码在编译后，其计算逻辑必须与原始代码字节级一致。
最终输出必须与原始代码像素级一致。
严格禁止改变代码的执行顺序、省略任何计算、或进行任何可能影响编译器内联决策的函数提取。
变量解构与隔离协议 (单一职责原则):
这是重构的核心。你的任务是消除变量混用，而不是简单地重命名。请遵循以下**“解包-隔离-废弃”**三步协议：
A. 单次解包: 识别任何一个从纹理、常量缓冲区或计算结果中产生的、其内部包含多种不同逻辑数据的复合类型变量（如 float4）。将这个原始的、多用途的变量视为一个临时的“数据包”。
B. 立即隔离: 紧接着上一步，立即将该“数据包”中的所有逻辑数据，提取到各自独立的、具有明确单一用途的标量或小维度向量变量中。新变量的命名必须精确反映其承载的唯一数据。
C. 永久废弃: 在完成隔离后，在后续的全部代码中，必须将原始的“数据包”变量视为已废弃。所有后续的计算都必须且只能使用上一步中创建的、单一用途的独立变量。
非规范分量访问的逻辑翻译 (关键指令):
原始代码可能利用了HLSL对向量的非规范分量访问规则。例如，对一个二维向量 (float2) 访问其第三或第四个分量 (.z 或 .w)。这种操作在编译后通常会产生确定性的常量值（通常是0或1，具体取决于硬件和编译器）。
规则: 在你执行“变量解构与隔离协议”的过程中，如果发现原始代码对一个低维度的“数据包”变量进行了非规范的高维度分量访问（例如，对一个float2变量应用.zzzz swizzle），你必须进行如下翻译：
识别意图: 分析该操作的真实意图。它不是为了获取数据，而是为了生成一个由特定常量值组成的更高维度的向量。
逻辑替换: 在重构后的代码中，不要尝试对任何已隔离的变量进行这种非规范访问（这将导致编译错误）。你必须直接用一个显式构造的、由相应常量值组成的字面量 (literal value) 来替换整个操作。
确定常量: 根据HLSL规范，访问不存在的分量通常返回0。因此，将该操作替换为一个由0.0f组成的、维度正确的向量字面量。
输出要求:
提供一份完整的、遵循上述所有指令（特别是对非规范分量访问的精确逻辑翻译）重构后的HLSL代码。整个重构过程是一个确保每一步转换都保持逻辑绝对正确的系统性修复。
FragOutput frag (Varyings fragmentInput)
{
    // 根据反编译代码输入调整输入结构
    float4 v0 = fragmentInput.uv; // 您的指定映射
    float4 v9 = fragmentInput.positionCS; // SV_Position -> v9
    float4 v2 = fragmentInput.uv; // TEXCOORD0 -> v2

    // 为缺失的、但在代码中使用的输入变量提供定义以修复语法错误
    float4 v1 = 0;
    float4 v6 = 0;
    float2 v7 = 0;
    float4 v8 = 0;
    
    // 声明输出结构和内部变量
    FragOutput OUT;
    float4 o0_GI, o1_Normal_Diffuse_FaceSDFMask, o2_ShadowColor_PackShadeMode_OutputMask, o3_BaseColor_ToonSkinMask, o4, o5_RimDepth, o6_rimStrength_HSVPack_groundSpec_charRegion;
    float4 r0,r1,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11,r12;
    uint4 bitmask, uiDest;
    float4 fDest;

// ---- 移植自反编译代码 ----

  r0.xyz = v1.zxy * v0.yzx;
  r0.xyz = v1.yzx * v0.zxy + -r0.xyz;
  r0.xyz = v1.www * r0.xyz;
  r1.xyzw = cb0[45].xyzw * v9.yyyy;
  r1.xyzw = v9.xxxx * cb0[44].xyzw + r1.xyzw;
  r1.xyzw = v9.zzzz * cb0[46].xyzw + r1.xyzw;
  r1.xyzw = cb0[47].xyzw + r1.xyzw;
  r1.xyz = r1.xyz / r1.www;
  r0.w = dot(-r1.xyz, -r1.xyz);
  r0.w = rsqrt(r0.w);
  r2.xyz = -r1.xyz * r0.www;
  r3.xyzw = _IN0.SampleBias(sampler_IN0, v2.xy, cb0[149].y).xyzw;
  r3.xy = r3.xy * float2(2,2) + float2(-1,-1);
  r3.xy = cb4[64].ww * r3.xy;
  r0.xyz = r3.yyy * r0.xyz;
  r0.xyz = r3.xxx * v0.xyz + r0.xyz;
  r0.xyz = v1.xyz + r0.xyz;
  r1.w = 1 + -cb0[144].w;
  r4.xyz = v1.xyz * r1.www;
  r0.xyz = r0.xyz * cb0[144].www + r4.xyz;
  r1.w = dot(r0.xyz, r0.xyz);
  r1.w = rsqrt(r1.w);
  r0.xyz = r1.www * r0.xyz;
  r3.xy = _IN1.SampleLevel(sampler_IN1, v2.xy, cb0[149].y).xy;
  r4.xyzw = (r3.xxxx >= float4(0.0500000007,0.300000012,0.5,0.899999976));
  r4.xyzw = r4.xyzw ? float4(1,1,1,1) : 0;
  r5.xyzw = (float4(0.0500000007,0.300000012,0.5,0.899999976) >= r3.xxxx);
  r5.yzw = r5.yzw ? float3(1,1,1) : 0;
  r4.yz = r5.zw * r4.yz;
  r1.w = -r4.x * r5.y + 1;
  r1.w = r5.x ? 1 : r1.w;
  r1.w = -r4.y * r1.w + 1;
  r2.w = r4.z * r1.w;
  r1.w = -r4.z * r1.w + 1;
  r1.w = r4.w * r1.w;
  r3.x = (cb4[65].y >= 0.5);
  r1.w = r3.x ? r1.w : cb4[65].x;
  r3.x = 1 + -r1.w;
  r1.w = cb4[65].z * r3.x + r1.w;
  r4.xyz = float3(-1,-1,-1) + cb4[4].xyz;
  r4.xyz = r1.www * r4.xyz + float3(1,1,1);
  r5.xyzw = _IN2.SampleBias(sampler_IN2, v2.xy, cb0[149].y).xyzw;
  r5.xyz = cb4[6].xyz * r5.xyz;
  r6.xyz = r5.xyz * r4.xyz;
  r3.x = cb4[65].w * r3.z;
  r3.z = cb4[66].x * r3.w;
  r4.w = saturate(dot(r0.xyz, r2.xyz));
  r6.w = (2.98023295e-008 >= r3.z);
  r7.x = log2(r3.z);
  r7.x = 0.100000001 * r7.x;
  r7.x = exp2(r7.x);
  r6.w = r6.w ? 0 : r7.x;
  r7.x = 1 + -r6.w;
  r7.x = r7.x * 19.8999996 + 0.100000001;
  r6.w = r6.w * -999 + 1000;
  r7.y = (r3.x >= 0.850000024);
  r7.y = r7.y ? 1.000000 : 0;
  r7.z = cb4[66].y + -cb4[66].z;
  r7.z = r7.y * r7.z + cb4[66].z;
  r8.xyz = -cb3[36].xyz + cb3[17].xyz;
  r8.xyz = cb4[67].yyy * r8.xyz;
  r7.w = (cb4[66].w >= 0.5);
  r7.w = r7.w ? 1.000000 : 0;
  r8.xyz = r7.www * r8.xyz + cb3[36].xyz;
  r7.w = dot(r8.xyz, r8.xyz);
  r7.w = sqrt(r7.w);
  r8.xyz = r8.xyz / r7.www;
  r9.xyz = cb4[8].xyz + cb2[5].xyz;
  r10.xyz = cb1[0].xyz + -r9.xyz;
  r7.w = dot(r10.xyz, r10.xyz);
  r7.w = sqrt(r7.w);
  r10.xyz = r10.xyz / r7.www;
  r9.xyz = -cb1[0].xyz + r9.xyz;
  r7.w = dot(r9.xyz, r9.xyz);
  r7.w = sqrt(r7.w);
  r7.w = saturate(cb1[0].w * r7.w);
  r9.xyz = -r10.xyz + r8.xyz;
  r9.xyz = r7.www * r9.xyz + r10.xyz;
  r9.xyz = r9.xyz + -r8.xyz;
  r8.xyz = cb1[1].zzz * r9.xyz + r8.xyz;
  r7.w = saturate(cb2[27].y);
  r9.xy = v6.xy;
  r9.z = v7.x;
  r9.xyz = r9.xyz + -r8.xyz;
  r8.xyz = r7.www * r9.xyz + r8.xyz;
  r7.w = dot(r8.xyz, r8.xyz);
  r7.w = sqrt(r7.w);
  r8.xyz = r8.xyz / r7.www;
  r2.x = dot(r8.xyz, r2.xyz);
  r2.y = 1 + -abs(r2.z);
  r2.x = r2.x * r2.y + 1;
  r2.x = 0.5 * r2.x;
  r2.y = -cb4[68].x + cb4[67].w;
  r2.x = r2.x * r2.y + cb4[68].x;
  r2.y = 1 + -r4.w;
  r2.x = r2.x * r2.y + cb4[68].y;
  r2.y = -cb4[68].z + r2.x;
  r2.z = cb4[68].z + r2.x;
  r4.w = cb4[68].w * r5.w;
  r5.w = max(0, r4.w);
  r5.w = min(cb4[69].x, r5.w);
  r5.w = r5.w / cb4[69].x;
  r7.w = max(cb4[69].y, r4.w);
  r7.w = min(1, r7.w);
  r7.w = -cb4[69].y + r7.w;
  r9.xy = float2(1,1) + -cb4[69].yz;
  r7.w = r7.w / r9.x;
  r8.w = -cb4[69].z + r5.w;
  r9.x = 1 / r9.y;
  r8.w = saturate(r9.x * r8.w);
  r9.x = r8.w * -2 + 3;
  r8.w = r8.w * r8.w;
  r8.w = r9.x * r8.w;
  r8.w = cb4[69].w * r8.w;
  r9.x = (2.98023295e-008 >= r8.w);
  r8.w = log2(r8.w);
  r8.w = cb4[70].x * r8.w;
  r8.w = exp2(r8.w);
  r8.w = cb4[70].y * r8.w;
  r8.w = r9.x ? 0 : r8.w;
  r9.x = dot(r0.xyz, r8.xyz);
  r8.w = r9.x * 0.5 + r8.w;
  r8.w = 0.5 + r8.w;
  r2.z = r2.z + -r2.y;
  r2.y = r8.w + -r2.y;
  r2.z = 1 / r2.z;
  r2.y = saturate(r2.y * r2.z);
  r2.z = r2.y * -2 + 3;
  r2.y = r2.y * r2.y;
  r2.y = r2.z * r2.y;
  r2.z = min(cb4[69].z, r5.w);
  r2.z = r2.z / cb4[70].z;
  r5.w = max(0.899999976, r2.z);
  r5.w = min(1, r5.w);
  r5.w = -0.899999976 + r5.w;
  r2.y = r5.w * r2.y;
  r5.w = (r2.y >= 0.0400000066);
  r9.x = r5.w ? 1.000000 : 0;
  r9.yzw = r9.xxx * r8.xyz;
  r9.yzw = float3(2,2,0) * r9.yzw;
  r9.yzw = r8.xyz * float3(-1,-1,1) + r9.yzw;
  r9.yzw = -r1.xyz * r0.www + r9.yzw;
  r10.x = dot(r9.yzw, r9.yzw);
  r10.x = sqrt(r10.x);
  r9.yzw = r9.yzw / r10.xxx;
  r9.y = saturate(dot(r9.yzw, r0.xyz));
  r8.xyz = -r1.xyz * r0.www + r8.xyz;
  r0.w = dot(r8.xyz, r8.xyz);
  r0.w = sqrt(r0.w);
  r8.xyz = r8.xyz / r0.www;
  r0.w = saturate(dot(r0.xyz, r8.xyz));
  r0.w = r0.w + -r9.y;
  r0.w = r7.y * r0.w + r9.y;
  r0.w = log2(r0.w);
  r0.w = r6.w * r0.w;
  r0.w = exp2(r0.w);
  r0.w = r0.w * r7.z;
  r6.w = 2 + r7.z;
  r0.w = r6.w * r0.w;
  r0.w = r0.w * 0.159154937 + -0.600000024;
  r0.w = saturate(0.833333373 * r0.w);
  r6.w = r0.w * -2 + 3;
  r0.w = r0.w * r0.w;
  r0.w = r6.w * r0.w;
  r0.w = r7.x * r0.w;
  r6.w = r3.x * 0.5 + 0.5;
  r8.xyz = r6.xyz * r3.xxx;
  r6.w = 0.0799999982 * r6.w;
  r9.yzw = r4.xyz * r5.xyz + -r6.www;
  r9.yzw = r3.xxx * r9.yzw + r6.www;
  r10.xyzw = r3.zzzz * float4(-1,-0.0274999999,-0.572000027,0.0219999999) + float4(1,0.0425000004,1.03999996,-0.0399999991);
  r3.x = r10.x * r10.x;
  r3.x = min(0.00160857651, r3.x);
  r3.x = r3.x * r10.x + r10.y;
  r7.xz = r3.xx * float2(-1.03999996,1.03999996) + r10.zw;
  r3.x = saturate(50 * r9.z);
  r3.x = r7.z * r3.x;
  r10.xyz = r9.yzw * r7.xxx + r3.xxx;
  r9.yzw = cb4[71].xxx * r9.yzw;
  r11.xyz = r9.yzw * r0.www;
  r10.xyz = cb4[71].xxx * r10.xyz;
  r8.xyz = cb4[71].xxx * -r8.xyz + r6.xyz;
  r11.xyz = r11.xyz * r7.yyy;
  r11.xyz = cb4[71].yyy * r11.xyz;
  r2.w = max(r1.w, r2.w);
  r2.w = 1 + -r2.w;
  r3.x = -r3.w * cb4[66].x + 1;
  r3.x = (r3.x >= 0.00999999978);
  r3.x = r3.x ? 1.000000 : 0;
  r2.w = r3.x * r2.w;
  r7.xzw = r7.www * r6.xyz;
  r7.xzw = cb4[10].xyz * r7.xzw;
  r7.xzw = r2.www * r11.xyz + r7.xzw;
  r7.xzw = v7.yyy * cb4[45].xyz + r7.xzw;
  r11.xyz = cb4[46].xyz + -r7.xzw;
  r7.xzw = cb4[83].yyy * r11.xyz + r7.xzw;
  r8.xyz = r9.yzw * r0.www + r8.xyz;
  r11.xyzw = cb0[13].yzzx * r1.yyyy;
  r11.xyzw = r1.xxxx * cb0[12].yzzx + r11.xyzw;
  r11.xyzw = r1.zzzz * cb0[14].yzzx + r11.xyzw;
  r11.xyzw = cb0[15].yzzx + r11.xyzw;
  r0.w = dot(r11.xzw, r11.xzw);
  r0.w = sqrt(r0.w);
  r11.xyzw = r11.xyzw / r0.wwww;
  r12.xyzw = cb0[13].zxyz * r0.yyyy;
  r12.xyzw = r0.xxxx * cb0[12].zxyz + r12.xyzw;
  r12.xyzw = r0.zzzz * cb0[14].zxyz + r12.xyzw;
  r3.xw = r12.zw * r11.zw;
  r3.xw = r11.yx * r12.yx + -r3.wx;
  r3.xw = r3.xw * float2(0.5,0.5) + float2(0.5,0.5);
  r11.xyzw = _IN3.SampleBias(sampler_IN3, r3.xw, cb0[149].y).xyzw;
  r0.w = 3 * r3.z;
  r0.w = saturate(r0.w);
  r3.x = r11.y + -r11.x;
  r0.w = r0.w * r3.x + r11.x;
  r3.xz = saturate(r3.zz * float2(3,3) + float2(-1,-2));
  r3.w = r11.z + -r0.w;
  r0.w = r3.x * r3.w + r0.w;
  r3.x = r11.w + -r0.w;
  r0.w = r3.z * r3.x + r0.w;
  r3.x = cb4[83].z + -cb4[83].w;
  r3.x = r7.y * r3.x + cb4[83].w;
  r3.z = r5.w ? 0 : 1;
  r3.w = r3.x * r3.z;
  r5.w = cb4[84].x + -cb4[83].w;
  r5.w = r7.y * r5.w + cb4[83].w;
  r3.x = -r3.x * r3.z + r5.w;
  r3.x = r9.x * r3.x + r3.w;
  r0.w = r3.x * r0.w;
  r3.xzw = r10.xyz * r0.www + r8.xyz;
  r3.xzw = -r4.xyz * r5.xyz + r3.xzw;
  r3.xzw = r2.www * r3.xzw + r6.xyz;
  r4.xyz = cb4[84].zzz * r3.xzw;
  r0.w = max(0, r8.w);
  r0.w = min(cb4[85].z, r0.w);
  r2.w = r8.w + -r0.w;
  r0.w = r2.z * r2.w + r0.w;
  r0.w = 0.5 + r0.w;
  r5.x = saturate(r0.w + -r2.x);
  r0.w = 0.100000001 + -cb4[85].w;
  r5.y = r1.w * r0.w + cb4[85].w;
  r5.xyz = _IN4.SampleBias(sampler_IN4, r5.xy, cb0[149].y).xyz;
  r0.w = (cb3[1].w >= 0.0500000007);
  r0.w = r0.w ? 1.000000 : 0;
  r0.w = r3.y * r0.w;
  r3.xyz = -cb4[84].zzz * r3.xzw + r5.xyz;
  r6.xyz = r4.xyz + r4.xyz;
  r3.xyz = r0.www * r3.xyz + r6.xyz;
  r3.xyz = r3.xyz * float3(0.5,0.5,0.5) + -r4.xyz;
  r3.xyz = r1.www * r3.xyz + r4.xyz;
  r2.x = dot(r3.xyz, float3(0.300000012,0.589999974,0.109999999));
  r4.xyz = r2.xxx + -r3.xyz;
  o3_BaseColor_ToonSkinMask.xyz = cb4[86].xxx * r4.xyz + r3.xyz;
  r3.xyz = -cb4[62].xyz + cb4[61].xyz;
  r3.xyz = r1.www * r3.xyz + cb4[62].xyz;
  r4.xyz = r5.xyz + -r3.xyz;
  r3.xyz = r0.www * r4.xyz + r3.xyz;
  r0.w = dot(r3.xyz, float3(0.300000012,0.589999974,0.109999999));
  r4.xyz = r0.www + -r3.xyz;
  r3.xyz = cb4[86].xxx * r4.xyz + r3.xyz;
  r0.w = 1 + -r2.z;
  r0.w = -r0.w * cb4[94].y + 1;
  r2.x = r2.y * 4.99999905 + 0.5;
  r0.w = r2.x * r0.w;
  r2.x = asint(cb2[26].w) & 1;
  r2.x = (0 < (uint)r2.x);
  r2.y = (asint(cb0[160].x) != 0);
  r2.x = (int)r2.y | (int)r2.x;
  if (r2.x != 0) {
    r2.xy = -cb0[134].xy + v9.xy;
    r2.xy = r2.xy * cb0[135].zw + float2(-0.5,-0.5);
    r2.xy = v9.ww * r2.xy;
    r2.zw = v9.zw;
    r5.xyw = float3(2,-2,1);
    r5.z = v9.w;
    r2.xyzw = r5.xyzw * r2.xyzw;
    r2.xyz = r2.zxy / r2.www;
    r2.yz = -cb0[131].xy + r2.yz;
    r4.xyz = v8.zxy / v8.www;
    r4.yz = -cb0[131].zw + r4.yz;
    r2.xyz = -r4.xyz + r2.xyz;
    r5.xy = r2.yz * float2(0.249500006,0.249500006) + float2(0.499992371,0.499992371);
    r2.y = (uint)r2.x >> 16;
    r2.y = (uint)r2.y;
    r2.y = r2.y * 1.52590219e-005 + 1.52590223e-006;
    r2.x = (int)r2.x & 0x0000ffff;
    r2.x = (uint)r2.x;
    r2.x = r2.x * 1.52590219e-005 + 1.52590223e-006;
    r5.zw = min(float2(1,1), r2.yx);
    r2.x = (cb2[20].w == 0.000000);
    r2.y = (asint(cb0[160].x) == 0);
    r2.x = r2.y ? r2.x : 0;
    o4.xyzw = r2.xxxx ? float4(0,0,0,0) : r5.xyzw;
  } else {
    o4.xyzw = float4(0,0,0,0);
  }
  r2.xyz = max(float3(0,0,0), r7.xzw);
  r2.w = (0 < cb0[146].x);
  if (r2.w != 0) {
    r1.xyz = -cb0[70].xyz + r1.xyz;
    r4.xyz = -cb2[5].xyz + r1.xyz;
    r5.xyz = float3(1,1,1) + cb2[19].xyz;
    r4.xyz = (r5.xyz < abs(r4.xyz));
    r2.w = (int)r4.y | (int)r4.x;
    r2.w = (int)r4.z | (int)r2.w;
    r1.x = dot(r1.xyz, float3(0.577000022,0.577000022,0.577000022));
    r1.x = 0.00200000009 * r1.x;
    r1.x = frac(r1.x);
    r1.x = (0.5 < r1.x);
    r1.xyz = r1.xxx ? float3(0,1,1) : float3(1,1,0);
    r2.xyz = r2.www ? r1.xyz : r2.xyz;
  }
  r1.x = (asint(cb0[249].x) == 1);
  if (r1.x != 0) {
    r1.x = dot(float3(1,1,1), abs(r0.xyz));
    r1.xy = r0.xy / r1.xx;
    r4.xy = float2(1,1) + -abs(r1.yx);
    r5.xy = (r1.xy >= float2(0,0));
    r5.xy = r5.xy ? float2(0.5,0.5) : float2(-0.5,-0.5);
    r4.xy = r5.xy * r4.xy;
    r1.z = (0 >= r0.z);
    r1.z = r1.z ? 1.000000 : 0;
    r4.xy = r4.xy * float2(2,2) + -r1.xy;
    r1.xy = r1.zz * r4.xy + r1.xy;
    o1_Normal_Diffuse_FaceSDFMask.xy = r1.xy * float2(0.5,0.5) + float2(0.5,0.5);
    r3.xyz = saturate(r3.xyz);
    o2_ShadowColor_PackShadeMode_OutputMask.xyz = sqrt(r3.xyz);
    bitmask.x = ((~(-1 << 3)) << 5) & 0xffffffff;  r1.x = (((uint)cb2[23].w << 5) & bitmask.x) | ((uint)12 & ~bitmask.x);
    r1.x = (uint)r1.x;
    o2_ShadowColor_PackShadeMode_OutputMask.w = 0.00392156886 * r1.x;
    o1_Normal_Diffuse_FaceSDFMask.z = 1;
    o1_Normal_Diffuse_FaceSDFMask.w = r0.w;
    o4.xyzw = float4(0,0,0,0);
    r1.xy = float2(0,0);
    o3_BaseColor_ToonSkinMask.w = cb4[94].z;
  } else {
    r1.z = (r1.w >= 0.5);
    o1_Normal_Diffuse_FaceSDFMask.w = r1.z ? 0.666000 : 0;
    r1.z = saturate(cb4[94].w);
    r1.z = 255 * r1.z;
    r1.z = round(r1.z);
    r1.w = saturate(cb4[95].x);
    r1.w = 15 * r1.w;
    r1.w = round(r1.w);
    r1.zw = (uint2)r1.zw;
    bitmask.z = ((~(-1 << 4)) << 0) & 0xffffffff;  r1.z = (((uint)r1.w << 0) & bitmask.z) | ((uint)r1.z & ~bitmask.z);
    r1.z = (uint)r1.z;
    r1.y = 0.00392156886 * r1.z;
    r1.z = dot(float3(1,1,1), abs(r0.xyz));
    r0.xy = r0.xy / r1.zz;
    r1.zw = float2(1,1) + -abs(r0.yx);
    r4.xy = (r0.xy >= float2(0,0));
    r4.xy = r4.xy ? float2(0.5,0.5) : float2(-0.5,-0.5);
    r1.zw = r4.xy * r1.zw;
    r0.z = (0 >= r0.z);
    r0.z = r0.z ? 1.000000 : 0;
    r1.zw = r1.zw * float2(2,2) + -r0.xy;
    r0.xy = r0.zz * r1.zw + r0.xy;
    o1_Normal_Diffuse_FaceSDFMask.xy = r0.xy * float2(0.5,0.5) + float2(0.5,0.5);
    r3.xyz = saturate(r3.xyz);
    o2_ShadowColor_PackShadeMode_OutputMask.xyz = sqrt(r3.xyz);
    bitmask.x = ((~(-1 << 3)) << 5) & 0xffffffff;  r0.x = (((uint)cb2[23].w << 5) & bitmask.x) | ((uint)12 & ~bitmask.x);
    r0.x = (uint)r0.x;
    o2_ShadowColor_PackShadeMode_OutputMask.w = 0.00392156886 * r0.x;
    o1_Normal_Diffuse_FaceSDFMask.z = r0.w;
    r1.x = cb4[94].z;
    o3_BaseColor_ToonSkinMask.w = r4.w;
  }
  o0_GI.xyz = r2.xyz;
  o0_GI.w = 0;
  o5_RimDepth.xyzw = v9.zzzz;
  o6_rimStrength_HSVPack_groundSpec_charRegion.xy = r1.xy;
  o6_rimStrength_HSVPack_groundSpec_charRegion.zw = float2(0,0);

  // 由于这是测试因此没用MRT 只能改o0预览正确性 即使这里错误也不用管
  OUT.o0_GI = o3_BaseColor_ToonSkinMask;
  OUT.o1_Normal_Diffuse_FaceSDFMask = o1_Normal_Diffuse_FaceSDFMask;
  OUT.o2_ShadowColor_PackShadeMode_OutputMask = o2_ShadowColor_PackShadeMode_OutputMask;
  OUT.o3_BaseColor_ToonSkinMask = o3_BaseColor_ToonSkinMask;
  OUT.o4 = o4;
  OUT.o5_RimDepth = o5_RimDepth;
  OUT.o6_rimStrength_HSVPack_groundSpec_charRegion = o6_rimStrength_HSVPack_groundSpec_charRegion;
  
  return OUT;
}