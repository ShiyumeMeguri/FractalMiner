给我反编译为URP可用的后处理完整流程shader 
这个是bloom后处理的汇编代码 根据给出的cbbuffer和代码逻辑仔细分析 还原为准确无误的变量名
已有RT
DownBloom2x
DownBloom4x
DownBloom8x
DownBloom16x
DownBloom32x
UpBloom8x
UpBloom16x
UpBloom32x
BloomTex

1.Bloom Prefilter
输入 _SourceTex 1920x1080 和_TransparentMaskRT 输出 DownBloom2x
// ---- Created with 3Dmigoto v1.3.16 on Mon Sep 15 16:14:52 2025
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[121];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r1.xyz = (int3)r0.xyz & int3(0x7fffffff,0x7fffffff,0x7fffffff);
  r2.xyz = cmp(int3(0x7f800000,0x7f800000,0x7f800000) < (uint3)r1.xyz);
  r1.xyz = cmp((int3)r1.xyz == int3(0x7f800000,0x7f800000,0x7f800000));
  r0.w = (int)r2.y | (int)r2.x;
  r0.w = (int)r2.z | (int)r0.w;
  r1.x = (int)r1.y | (int)r1.x;
  r1.x = (int)r1.z | (int)r1.x;
  r0.w = (int)r0.w | (int)r1.x;
  r0.xyz = r0.www ? float3(0,0,0) : r0.xyz;
  r1.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  r0.w = max(1, r1.y);
  r1.x = cb0[120].z + -r1.x;
  r1.x = max(0, r1.x);
  r0.xyz = r0.xyz * r0.www;
  r0.xyz = min(cb0[120].yyy, r0.xyz);
  r0.w = max(r0.x, r0.y);
  r0.w = max(r0.w, r0.z);
  r1.y = r0.w + -r1.x;
  r0.w = max(9.99999975e-005, r0.w);
  r1.z = r1.x * 0.5 + r1.y;
  r1.z = max(0, r1.z);
  r1.z = min(r1.z, r1.x);
  r1.x = r1.x * 2 + 9.99999975e-005;
  r1.z = r1.z * r1.z;
  r1.x = r1.z / r1.x;
  r1.x = max(r1.y, r1.x);
  r0.w = r1.x / r0.w;
  o0.xyz = r0.xyz * r0.www;
  o0.w = 1;
  return;
}

2.Bloom Blur Horizontal
输入 DownBloom2x 输出 UpBloom4x
// ---- Created with 3Dmigoto v1.3.16 on Mon Sep 15 16:14:27 2025
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[119];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xz = float2(8,6) * cb0[118].xx;
  r0.yw = float2(0,0);
  r1.xyzw = v1.xyxy + -r0.xyzw;
  r0.xyzw = v1.xyxy + r0.zwxw;
  r2.xyzw = t0.Sample(s0_s, r1.zw).xyzw;
  r1.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r2.xyz = float3(0.0540540516,0.0540540516,0.0540540516) * r2.xyz;
  r1.xyz = r1.xyz * float3(0.0162162203,0.0162162203,0.0162162203) + r2.xyz;
  r2.xz = float2(4,2) * cb0[118].xx;
  r2.yw = float2(0,0);
  r3.xyzw = v1.xyxy + -r2.xyzw;
  r2.xyzw = v1.xyxy + r2.zwxy;
  r4.xyzw = t0.Sample(s0_s, r3.xy).xyzw;
  r3.xyzw = t0.Sample(s0_s, r3.zw).xyzw;
  r1.xyz = r4.xyz * float3(0.121621624,0.121621624,0.121621624) + r1.xyz;
  r1.xyz = r3.xyz * float3(0.194594592,0.194594592,0.194594592) + r1.xyz;
  r3.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r1.xyz = r3.xyz * float3(0.227027029,0.227027029,0.227027029) + r1.xyz;
  r3.xyzw = t0.Sample(s0_s, r2.xy).xyzw;
  r2.xyzw = t0.Sample(s0_s, r2.zw).xyzw;
  r1.xyz = r3.xyz * float3(0.194594592,0.194594592,0.194594592) + r1.xyz;
  r1.xyz = r2.xyz * float3(0.121621624,0.121621624,0.121621624) + r1.xyz;
  r2.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r0.xyzw = t0.Sample(s0_s, r0.zw).xyzw;
  r1.xyz = r2.xyz * float3(0.0540540516,0.0540540516,0.0540540516) + r1.xyz;
  o0.xyz = r0.xyz * float3(0.0162162203,0.0162162203,0.0162162203) + r1.xyz;
  o0.w = 1;
  return;
}
3.Bloom Blur Vertical
输入 UpBloom4x 输出 DownBloom8x
// ---- Created with 3Dmigoto v1.3.16 on Mon Sep 15 16:18:55 2025
Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[119];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = 0;
  r0.yw = float2(3.23076916,1.38461542) * cb0[118].yy;
  r1.xyzw = v1.xyxy + -r0.xyxw;
  r0.xyzw = v1.xyxy + r0.xwxy;
  r2.xyzw = t0.Sample(s0_s, r1.zw).xyzw;
  r1.xyzw = t0.Sample(s0_s, r1.xy).xyzw;
  r2.xyz = float3(0.31621623,0.31621623,0.31621623) * r2.xyz;
  r1.xyz = r1.xyz * float3(0.0702702701,0.0702702701,0.0702702701) + r2.xyz;
  r2.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r1.xyz = r2.xyz * float3(0.227027029,0.227027029,0.227027029) + r1.xyz;
  r2.xyzw = t0.Sample(s0_s, r0.xy).xyzw;
  r0.xyzw = t0.Sample(s0_s, r0.zw).xyzw;
  r1.xyz = r2.xyz * float3(0.31621623,0.31621623,0.31621623) + r1.xyz;
  o0.xyz = r0.xyz * float3(0.0702702701,0.0702702701,0.0702702701) + r1.xyz;
  o0.w = 1;
  return;
}

4.Bloom Blur Horizontal
输入 DownBloom8x 输出 UpBloom16x

5.Bloom Blur Vertical
输入 UpBloom16x 输出 DownBloom16x2

6.Bloom Blur Horizontal
输入 DownBloom16x2 输出 UpBloom32x

7.Bloom Blur Vertical
输入 UpBloom32x 输出 DownBloom32x2

8.Bloom Blur Horizontal
输入 DownBloom32x2 输出 UpBloom64x

9.Bloom Blur Vertical
输入 UpBloom64x 输出 DownBloom64x2

10.Bloom Blur Horizontal
输入 DownBloom64x2 输出 DownBloom128

11.Bloom Blur Vertical
输入 DownBloom128 输出 DownBloom128x2

12.Bloom Upsample
输入 DownBloom64x2和DownBloom128x2 输出 UpBloom64x
// ---- Created with 3Dmigoto v1.3.16 on Mon Sep 15 16:28:35 2025
Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerState s0_s : register(s0);

cbuffer cb0 : register(b0)
{
  float4 cb0[121];
}




// 3Dmigoto declarations
#define cmp -


void main(
  float4 v0 : SV_POSITION0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.xyzw = t1.Sample(s0_s, v1.xy).xyzw;
  r1.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r0.xyz = -r1.xyz + r0.xyz;
  o0.xyz = cb0[120].xxx * r0.xyz + r1.xyz;
  o0.w = 1;
  return;
}

12.Bloom Upsample
输入 DownBloom32x2和UpBloom64x 输出 UpBloom32x

13.Bloom Upsample
输入 DownBloom16x2 UpBloom32x 输出 UpBloom16x

14.Bloom Upsample
输入 DownBloom8x UpBloom16x 输出 UpBloom4x

14.Bloom Upsample
输入 DownBloom2x UpBloom4x 输出 BloomTex